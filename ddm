#!/usr/bin/env sh

VERSION='0.7.0'

ENV='/usr/bin/env'

CP="$ENV"' cp -L'
SH="$ENV"' sh'
LN="$ENV"' ln -sf'
LS="$ENV"' ls -C'
RM="$ENV"' rm'
FIND="$ENV"' find'
GREP="$ENV"' grep'
MKDIR="$ENV"' mkdir -p'
RMDIR="$ENV"'rmdir -p' 

VALID_INSTALL_METHODS='symlink copy'

DOTFILES_GLOB='.[!.]*'
NORMFILE_GLOB='[!.]*'

IGNORED_GLOBS_FILE='.ddmignore'
CREATED_DIRS_CACHE_FILE='.created_dirs'
CREATED_FILES_CACHE_FILE='.created_files'

IGNORED_GLOBS=''
CREATED_DIRS_CACHE=''
CREATED_FILES_CACHE=''

RED='\e[31m'
GRAY='\e[90m'
WHITE='\e[0m'
YELLO='\e[33m'

VERBOSE=0
FORCE=0
ADOPT=0

############################## OUTPUT ##############################

##
# responsible for printing the usage of the command to the user
##
usage() {
cat << EOF
ddm version $VERSION

usage: ddm <command> [<args>]

DESCRIPTION
    Ddm is a useful tool for deploying and syncing user local
    configurations/dotfiles.

COMMANDS:
    install      Install application configurations
    uninstall    Remove installed application configurations
    adopt        Pull configuration data back to the source(s)
    tree         List configuration packs in a tree-like way 

OPTIONS:
    -v    Increase verbosity to debug levels
    -f    Overwrite file conflicts
    -a    Adopt file conflicts
    -h    Show this help
EOF
}

##
# prints verbose output to the user
#
# prints info to the user if the global flag $VERBOSE is greater than
# 0 ($VERBOSE should be set to 1 for verbose output).
#
# @1 - the message to display to the user
##
info() {
    if [ "$VERBOSE" -gt 0 ]; then
        printf '%b[ info ]%b %s\n' "$GRAY" "$WHITE" "$1"
    fi
}

##
# warns the user that something may be wrong
#
# @1 - the message to warn the user
##
warn() {
    printf '%b[ warn ]%b %s\n' "$YELLO" "$WHITE" "$1"
}

##
# displays an unrecoverable error to the user
#
# @1 - the error message to display
##
error() {
    printf '%b[ erro ]%b %s\n' "$RED" "$WHITE" "$1"
}

##
# prompts the user to resolve a file conflict by overwriting,
# adopting, or neither.
#
# @1       - path to show to user
# @return  - 
#     0 - Overwrite
#     1 - Leave Alone
#     2 - Adopt
#     3 - Unknown
##
prompt_conflict() {
    # give the user a prompt to contextualize their choice
    warn 'conflict at '"$1"'; do you want to overwrite, adopt, or leave alone?(O/A/n)? [O] '

    # set a default choice
    choice='n'

    # read & process choice
    read -r choice
    case $choice in
        [Oo]*) return 0 ;;
        [Nn]*) return 1 ;;
        [Aa]*) return 2 ;;
    esac
}

############################## UTILITY ##############################

#################### STRING ####################

##
# converts a string to all lowercase characters
#
# @1      - the string to convert to lowercase
# @return - the string in all lowercase
##
to_lowercase() {
    printf '%s' "$1" | tr '[:upper:]' '[:lower:]'
}

##
# determines whether or not a given string starts with a substr
#
# @1      - the subtr to look for at the begining
# @2      - the string in which to search
# @return - true if the string starts with the substr, false otherwise
##
starts_with() {
    regex='^'"$1"
    masked="$(printf '%s' "$2" | $GREP -E "$regex")"

    # if we match grep returns something
    [ -n "$masked" ] && return 0
    return 1
}

##
# repeat a string n number of times
#
# @1      - the number of times to repeat the string
# @2      - the string to repeat
# @return - the string (@2) repeated @1 number of times
##
repeat_str() {
    result=''
    i=0
    while [ "$i" -lt "$1" ]; do
        result="$result""$2"
        i=$((i+1))
    done

    printf '%s' "$result"
}

#################### ARRAYS ####################

##
# reads the given file into a space-separated string 'array'
#
# the function reads the given file into a string with each new line
# being interpreted as a space.
#
# @1      - the file to read
# @return - the string array
##
file_to_array() {
    # if the file doesn't exist return empty array and error
    ! [ -f "$1" ] && { printf '%s' ""; return 1; }

    replaced="$(tr '\n' ' ' < "$1")"
    printf '%s' "$replaced"
}

##
# checks whether or not a string is in a string array
#
# @1      - the item to search for in the array
# @2      - the string array to search
# @return - 0 if the string is in the array, 1 otherwise
##
in_array() {
    regex="$1"'( |$)'
    masked="$(printf '%s' "$2" | $GREP -E "$regex")"

    # if we match return 0
    [ -n "$masked" ] && return 0
    return 1
}

##
# takes a glob pattern and an (optional) directory and returns the
# files that match the glob in the directory.
#
# @1      - the glob to use in the directory
# @2      - the directory in which to search (can be omitted
#           to match in the current directory)
# @return - string array of the files that match the glob, or
#           nothing if the glob doesn't match
##
collect_glob() {
    matches=''
    glob="$1"

    # append directory arg to glob
    [ -n "$2" ] && glob="$2"'/'"$glob"

    # shellcheck disable=SC2086
    matches="$($LS -d $glob 2>/dev/null)"

    printf '%s' "$matches"
}

#################### FILE SYSTEM ####################

##
# correct a given path with an offset to the root level directory
#
# @1      - the path to correct
# @return - the corrected path (can be the same as the input path)
##
submodule_path_correct() {
    # if the nest variable is not set we aren't recursing
    [ -z "$DDM" ] && { printf '%s' "$1"; return; }

    # create the relative path correction
    correction="$(repeat_str $((DDM * 2)) '../')"

    printf '%s%s' "$correction" "$1"
}

##
# add a newly created directory or file to the appropriate cache
# for later retrieval
#
# @1      - the newly created file/directory to log
# @return - whether or not the node was successfully logged
##
log_node() {
    corrected_dirs_cache="$(submodule_path_correct "$CREATED_DIRS_CACHE_FILE")"
    corrected_files_cache="$(submodule_path_correct "$CREATED_FILES_CACHE_FILE")"

    # log into the dirs cache file if we created a directory
    [ -d "$1" ] && { echo "$1" >> "$corrected_dirs_cache"; return 0; }

    # log into the files cache file if we created a file (copying) or a link
    [ -f "$1" ] || [ -L "$1" ] && { echo "$1" >> "$corrected_files_cache"; return 0; }

    # file is neither a directory, file, or symlink - something's wrong
    return 1
}

##
# preemptive conflict detection and resolution
#
# the function first checks whether or not a given file exists. if the file
# does exist, it then checks the global $FORCE flag and returns true if it's
# set; otherwise, it prompts the user to overwrite it, returning the user's
# decision
#
# @1      - the destination file to check
# @return - 0 for success, 2 for adoption, 1 to skip (failure) 
##
resolve_file_conflict() {
    # if the node doesn't exist we don't have a problem
    ! [ -e "$1" ] && return 0

    dest_filename="$(basename "$1")"

    # if it's in the files we've created we can skip
    if in_array "$1" "$CREATED_FILES_CACHE"; then
        info "skipping '$dest_filename'; already installed"
        return 1
    fi

    # if adopt is enabled we force adoption
    [ "$ADOPT" -gt 0 ] && { warn "auto-adopting '""$1""'"; return 2; }

    # if force is enabled we can override
    [ "$FORCE" -gt 0 ] && { warn "auto-overriding '""$1""'"; return 0; }

    # prompt the user for conflict resolution option
    prompt_conflict "$1"

    # propagate results & give user output
    case $? in
        0 ) return 0 ;; 
        1 ) info "skipping '$dest_filename'"; return 1; ;;
        2 ) info "adopting '$dest_filename'"; return 2; ;;
    esac

    return 1
}

##
# create a symlink between the source file path and a given destination
#
# @1      - source file path
# @2      - destination path
# @return - 0 for link success, 1 for failure
##
logged_ln() {
    # log and suppress error msg
    $LN "$1" "$2" 2>/dev/null

    # if the symlink doesn't exist we weren't able to link
    ! [ -h "$2" ] && { error "failed to create symlink in '""$2""'"; return 1; }

    log_node "$2"
    return 0
}

##
# copy a file to a destination and log a success
#
# @1      - source file path
# @2      - destination path
# @return - 0 for a copy success, 1 for failure
##
logged_cp() {
    # copy and suppress error msg
    $CP "$1" "$2" 2>/dev/null

    # if the file doesn't exist we weren't able to copy
    ! [ -f "$2" ] && { error "failed to copy file to '""$2""'"; return 1; }

    log_node "$2"
    return 0
}

##
# create a directory if it doesn't already exist
#
# @1      - the path of the directory to create
# @return - 0 on success, 1 for creation failure
##
create_dir_if_not_exists() {
    # if the directory exists we do nothing
    [ -d "$1" ] && return 0

    info "creating directory '""$1""' for confs"

    # create directory and log error if it occurs
    ! $MKDIR "$1" && { error "could not create directory '""$1""'"; return 1; }

    log_node "$1"
    return 0
}

##
# derives a destination file name from an input source filename.
#
# @1      - the filename to transform 
# @return - the transformed filename
##
translate_name() {
    # only operate on files
    ! [ -f "$1" ] && { printf '%s' "$1"; return 0; }

    filename="$(basename "$1")"
    path="$(dirname "$1")"'/'

    #do not include current directory path
    [ "$path" = './' ] && path=''

    filename='.'"${filename#dot-}"
    printf '%s' "$path""$filename"
}

#################### FUNCTIONALITY ####################

##
# load persistent files into memory
##
populate_caches() {
    # correct tld cache file paths for submodule recursion
    dirs_cache_path="$(submodule_path_correct "$CREATED_DIRS_CACHE_FILE")"
    files_cache_path="$(submodule_path_correct "$CREATED_FILES_CACHE_FILE")"

    # load caches with file_to_array function
    # shellcheck disable=SC2034
    CREATED_DIRS_CACHE="$(file_to_array "$dirs_cache_path")"
    CREATED_FILES_CACHE="$(file_to_array "$files_cache_path")"
    IGNORED_GLOBS="$(file_to_array "$IGNORED_GLOBS_FILE")"
}

##
# takes a given application name and returns whether or not it is a valid
# installation candidate
#
# this function first checks that an application meets its installation
# go-ahead, then it makes sure the configuration pack's in line with the spec,
# meaning that the things that must exist are present
#
# @1      - the name of the application
# @return - 0 if the application meets the criterion for install,
#           1 otherwise
##
can_install() {
    verify_script="$1"'/inst.sh'
    go_ahead=1

    if [ -x "$verify_script" ]; then
        $SH "$verify_script" && { go_ahead=0; }
    else
        # if the verification script doesn't exist use the default
        # method of checking if the command can be run
        [ -n "$(command -v "$appname")" ] && { go_ahead=0; }
    fi

    # perform no further checking without go-ahead;
    # we know that we cannot install
    [ ! "$go_ahead" ] && { return 1; }

    # make sure conf directory exists
    conf_path="$1"'/conf'
    ! [ -d "$conf_path" ] && { return 1; }

    return 0
}

##
# takes a path and returns whether it matches any of the patterns
# in the ignore cache.
#
# @1      - the directory/file name to check against
# @return - 0 if the directory is in the ignore cache, 1 otherwise
##
is_ignored() {
    # if the cache is empty, no pattern matches in it
    [ -z "$IGNORED_GLOBS" ] && { return 1; }

    for ignore in $IGNORED_GLOBS; do
        # if any of our patterns matches the path we exit;
        # this relies on starts_with's internal implementation
        # detail of a regex search to complete searches
        starts_with "$ignore" "$1" && { return 0; }
    done
    return 1
}

##
# installs an application with its installation properties
#
# the function sets up default installation properties, then
# allows the application's meta file to override them; the
# function then installs the application
#
# @1      - the name of the application to install
# @return - 0 for a successful install, 1 for any error
##
install_config() {
    # find meta script directory
    meta_script="$1"'/meta'

    # setup default install variables
    install_dir="$HOME""/.config/""$1"
    install_method="symlink"

    # override defaults if meta script exists
    if [ -x "$meta_script" ]; then
        # shellcheck disable=SC1090
        . "$meta_script"
    fi

    # perform sanity checks on install variables

    # check install method
    if ! in_array "$install_method" "$VALID_INSTALL_METHODS"; then
        error "'""$install_method""' is not a valid install method for '""$1""'"
        return 1
    fi

    # check install directory
    ! create_dir_if_not_exists "$install_dir" && { return 1; }

    # notify the user that an install is progressing
    info "installing '""$1""' confs"

    # setup configuration searching
    confs_location="$1"'/conf'
    unset confs

    # normally globs don't match dotfiles so we need two passes, once to
    # pick up the dotfiles, another to pick up any other files
    confs="$(collect_glob "$DOTFILES_GLOB" "$confs_location")"
    confs="$confs""$(collect_glob "$NORMFILE_GLOB" "$confs_location")"

    # derive and cache install function
    case "$install_method" in
        "symlink")
            install_fn=logged_ln
            fname_pretty='linking'
            ;;
        "copy")
            install_fn=logged_cp
            fname_pretty='copying'
            ;;
        *)
            error "unknown install method '""$install_method""'"
            return 1
            ;;
    esac

    for conf in $confs; do
        conf_fname="$(basename "$conf")"
        dest_path="$install_dir"'/'"$conf_fname"
        src_path="$(realpath "$conf")"

        # pretty-print current file operation
        info "$fname_pretty"" '""$conf""' to '""$install_dir""'"

        # attempt to resolve file conflict if one exists 
        resolve_file_conflict "$dest_path"

        # continue on resolution error 
        [ "$?" -eq 1 ] && continue

        # adopt file if the user indicated they would like us to
        # in conflict resolution - then continue as normal
        [ "$?" -eq 2 ] && $CP "$dest_path" "$src_path"

        # we get here if $? = 0 meaning the user wants to remove
        # the file and overwrite if it exists - so we delete it
        [ -f "$dest_path" ] && { $RM "$dest_path"; }

        # install with fully qualified paths
        $install_fn "$src_path" "$dest_path"
    done
}

##
# processes submodules by creating a child instance of ddm
#
# handles setting the DDM environment variable, then makes
# another ddm instance in the given submodules folder.
#
# @1      - the application for which to install the submodules
# @return - 1 if for failure for any reason (including non-existent
#           submodule dir), 0 for success
##
process_submodules() {
    # check existence of directory
    submodules_dir="$1"'/sub'
    ! [ -d "$submodules_dir" ] && return 1

    # get path of current executing script for instantiating
    # a new child instance
    cur_script_path="$(realpath "$0")"

    # set DDM if it doesn't exist
    [ -z "$DDM" ] && DDM=0

    # increment depth counter
    DDM=$((DDM+1))

    # export ddm for child
    export DDM

    # change directory into submodule
    cd "$submodules_dir" || { error 'could cd into submodule'; DDM=$((DDM-1)); export DDM; return 1; }

    # call child instance
    $SH "$cur_script_path"

    # exit directory of submodule
    cd '../..'

    # decrement ddm
    DDM=$((DDM-1))

    # unset if le 0 to prevent negative DDM
    [ "$DDM" -le 0 ] && unset DDM

    # export just in case
    export DDM
}

############################## SUBCOMMANDS ##############################

##
# installs all application packages in the given directory by
# first checking if they can be installed, then running the
# install_config command on them; this is the main driver behind
# all application configuration installation
##
install() {
    populate_caches

    for folder in $(collect_glob '*/'); do
        appname="$(basename "$folder")"

        # skip the folder if it is in the .ddmignore
        if is_ignored "$folder"; then
            info "skipping '""$appname""'; excluded in ddmignore"
            continue
        fi

        # check if we can install application
        if ! can_install "$appname"; then
            warn "skipping '""$appname""'; not able to install"
            continue
        fi

        # install associated configuration files
        install_config "$appname"

        # process submodule (if it exists)
        process_submodules "$appname"
    done
}

##
# uses the corresponding cache files to remove the installed
# symlinks and folders, first removing the symlinks, then
# removing the empty folders that remain (and leaving the ones
# that aren't empty)
##
uninstall() {
    # if no cache files exist we should warn the user about it and exit
    if [ ! -f "$CREATED_FILES_CACHE_FILE" ] && [ ! -f "$CREATED_DIRS_CACHE_FILE" ]; then
        warn 'cache files do not exist; are you sure you installed?'
        return 1
    fi

    # attempt to remove created files/symlinks
    created_files="$(file_to_array "$CREATED_FILES_CACHE_FILE")"
    for file in $created_files; do
        # remove the file redirecting errors
        [ -e "$file" ] && { info "removing file '""$file""'"; $RM "$file" 2>/dev/null; }

        # make sure that the file has been deleted
        [ -e "$file" ] && { error "could not remove file '""$file""'"; continue; }
    done

    # attempt to remove created directories
    created_dirs="$(file_to_array "$CREATED_DIRS_CACHE_FILE")"
    for directory in $created_dirs; do
        $RMDIR "$directory" 2>/dev/null

        # check if the directory still exists
        [ -d "$directory" ] && { warn "could not remove directory '""$directory""'"; continue; }

        # notify the user that we deleted a directory
        info "removed directory '""$directory""'"
    done

    # remove caches after use
    $RM -f "$CREATED_DIRS_CACHE_FILE" "$CREATED_FILES_CACHE_FILE"
}

##
# goes through the list of created files that are not symlinks
# and copied their modified content back to the source directory
# for later version control integration
##
adopt() {
    populate_caches

    for appfolder in $(collect_glob '*/'); do
        appname="$(basename "$appfolder")"

        # skip if not an installation candidate
        is_ignored "$appfolder" && continue
        ! can_install "$appname" && continue

        # load install dir variable
        install_dir="$HOME"'/.config/'"$appname"'/'

        meta_script="$appfolder"'meta'
        if [ -x "$meta_script" ]; then
            # shellcheck disable=SC1090
            . "$meta_script"
        fi

        # skip re-adopting symlinks
        [ "$install_method" = 'symlink' ] && continue

        # collect files in install directory
        dest_files="$(collect_glob "$DOTFILES_GLOB" "$install_dir")"
        dest_files="$dest_files""$(collect_glob '*' "$install_dir")"

        for dest_conf in $dest_files; do
            dconf_fname="$(basename "$dest_conf")"

            # work out potential corresponding source file for a
            # given destination file
            src_conf="$appfolder"'conf/'"$dconf_fname"

            # if the corresponding file doesn't exist, continue
            ! [ -f "$src_conf" ] && { continue; }

            # copy the destination back to the source
            cp -L "$dest_conf" "$src_conf"
        done

        # call submodules if they exist
        [ -d "$appfolder"'sub' ] && { process_submodules "$appname"; }
    done
}

##
# goes through every directory in the current directory and
# removes boilerplate/indicator folders from them before pretty
# printing.
##
ptree() {
    populate_caches

    # get subdirectories of all non-dotfile folders
    # shellcheck disable=SC2086
    listing="$($FIND $NORMFILE_GLOB -type d | $GREP -Ev '(\/conf|\/sub$)')"

    # print tree head
    printf '%s\n' '. conf packs'

    i=0
    n="$(printf '%s' "$listing" | wc -l)"
    for folder in $listing; do
        is_ignored "$folder"'/' && continue
        
        # matches top level directories (dirs without an ending /)
        tld_mask="$(printf '%s' "$folder" | $GREP -Eo '^\w*$')"

        if [ -n "$tld_mask" ]; then
            heading='├── '

            # print special heading for last tld 
            [ "$i" -eq "$n" ] && heading='└── '

            printf '%s\n' "$heading""$folder"
        else
            # extract name of subpack from path
            subname="$(printf '%s' "$folder" | $GREP -Eo '\w*$')"

            # get the slash characters from path to calculate depth
            subslashes="$(printf '%s' "$folder" | $GREP -Eo '\/')"
            before="$(repeat_str "${#subslashes}" ' ')"

            printf '%s\n' '│'"$before"'└── '"$subname"
        fi

        i=$((i + 1))
    done
}

############################## CLI PROCESSING ##############################

# if testing return instead of exit
[ -n "$DDM_TEST" ] && return 0;

# if parent set DDM_ARGS for children
[ -z "$DDM_ARGS" ] && { DDM_ARGS="$*"; export DDM_ARGS; }

# if child 'import' ddm definitions from parent
# shellcheck disable=SC2086
[ -n "$DDM" ] && { set $DDM_ARGS; }

# print usage info with no arguments
if [ $# -lt 1 ]; then usage && exit 1; fi

# help shortcut - subcommand processing would ordinarily prevent help flags
if [ "$1" = '-h' ] || [ "$1" = '--help' ]; then usage && exit 0; fi

# process command line options
subcommand=$1; shift
while getopts "favVh" opt; do
    case $opt in
        f )
            FORCE=1
        ;;
        v )
            VERBOSE=1
        ;;
        a )
            ADOPT=1
        ;;
        h )
            usage
            exit 0
        ;;
        ? )
            error 'Unknown option'
            usage
            exit 1
        ;;
    esac
done

# process subcommands
case $subcommand in
    'install' )
        install
    ;;
    'uninstall' )
        uninstall
    ;;
    'adopt' )
        adopt
    ;;
    'tree' )
        ptree
    ;;
    * )
        $ENV 'ddm-'"$subcommand" "$@" 2>/dev/null && { exit 0; }

        # env will return err code 127 if it cannot find the program - we test for that and return an error
        [ "$?" -eq 127 ] && { error "'""$subcommand""'"" is not a ddm command. See 'ddm -h'."; exit 1; }
    ;;
esac
